{"version":3,"sources":["components/Header.js","components/Cardtable.js","imagemap.js","components/Card.js","components/Touched.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","Cardtable","onClick","this","dealCards","React","Component","imagemap","card1","image","desc","status","card2","card3","card4","card5","card6","card7","card8","card9","card10","card11","card12","card13","card14","card15","card16","card17","card18","card19","card20","card21","card22","Card","handleClick","hasBeenTouched","index","touchClick","touchyTouchy","details","unTouched","src","alt","disabled","Touched","total","Object","keys","touched","reduce","prevTotal","key","card","cards","count","App","state","currentScore","topScore","winLose","clicked","setState","cardArray","sort","a","b","Math","random","map","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.98a04e93.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = props => (\n  <header className=\"header-cont\">\n      <div>\n      <h1 className=\"no-marge title-center h1-size\">Tarot</h1>\n    <h3 className=\"tagline no-marge h3-size\">\n      A game of fate, hate, your own clean slate&mdash;or your expiration date?\n    </h3>\n      </div>\n  </header>\n);\n\nexport default Header;\n","import React from \"react\";\n\n\nclass Cardtable extends React.Component {\n    render() {\n      return (\n        <div>\n       <button className=\"button\" onClick={this.props.dealCards}>\n        Deal Cards\n        </button>\n  </div>\n      );\n    }\n  }\n\n\nexport default Cardtable;\n","// This is just some sample data so you don't have to think of your own!\nconst imagemap = {\n  card1: {\n    image: \"./images/a01.jpg\",\n    desc: \"Le Bateluer\",\n    status: false\n  },\n\n  card2: {\n    image: \"./images/a02.jpg\",\n    desc: \"Le Papesse\",\n    status: false\n  },\n\n  card3: {\n    image: \"./images/a03.jpg\",\n    desc: \"L'Impatrice\",\n    status: false\n  },\n\n  card4: {\n    image: \"./images/a04.jpg\",\n    desc: \"L'Emperuer\",\n    status: false\n  },\n\n  card5: {\n    image: \"./images/a05.jpg\",\n    desc: \"Le Pape\",\n    status: false\n  },\n\n  card6: {\n    image: \"./images/a06.jpg\",\n    desc: \"Le Moverevx\",\n    status: false\n  },\n\n  card7: {\n    image: \"./images/a07.jpg\",\n    desc: \"Le Chariot\",\n    status: false\n  },\n\n  card8: {\n    image: \"./images/a08.jpg\",\n    desc: \"La Justice\",\n    status: false\n  },\n  card9: {\n    image: \"./images/a09.jpg\",\n    desc: \"L'Hermite'\",\n    status: false\n  },\n  card10: {\n    image: \"./images/a10.jpg\",\n    desc: \"L'a Rove De Fortvne\",\n    status: false\n  },\n  card11: {\n    image: \"./images/a11.jpg\",\n    desc: \"La Force\",\n    status: false\n  },\n  card12: {\n    image: \"./images/a12.jpg\",\n    desc: \"Le Pendu\",\n    status: false\n  },\n  card13: {\n    image: \"./images/a13.jpg\",\n    desc: \"XIII\",\n    status: false\n  },\n  card14: {\n    image: \"./images/a14.jpg\",\n    desc: \"Temperance\",\n    status: false\n  },\n  card15: {\n    image: \"./images/a15.jpg\",\n    desc: \"Le Diable\",\n    status: false\n  },\n  card16: {\n    image: \"./images/a16.jpg\",\n    desc: \"La Maison Diev\",\n    status: false\n  },\n  card17: {\n    image: \"./images/a17.jpg\",\n    desc: \"Le Toille\",\n    status: false\n  },\n  card18: {\n    image: \"./images/a18.jpg\",\n    desc: \"La Lune\",\n    status: false\n  },\n  card19: {\n    image: \"./images/a19.jpg\",\n    desc: \"Le Soleil\",\n    status: false\n  },\n  card20: {\n    image: \"./images/a20.jpg\",\n    desc: \"Le Jugement\",\n    status: false\n  },\n  card21: {\n    image: \"./images/a21.jpg\",\n    desc: \"Le Monde\",\n    status: false\n  },\n  card22: {\n    image: \"./images/a22.jpg\",\n    desc: \"Le Mat\",\n    status: false\n  }\n};\n\nexport default imagemap;\n","import React from \"react\";\n\n\nclass Card extends React.Component {\n    // constructor (props){\n    //     super()\n    //     this.state = {\n    //         status: props.status || false\n    //     }\n    // }\n    \n    handleClick = () => {\n        this.props.hasBeenTouched(this.props.index)\n    }\n  touchClick = () => {\n    this.props.touchyTouchy(this.props.index)\n  }\n    render() {\n        const {image, desc, status} = this.props.details;\n        const unTouched = status === false;\n      return (\n        <div className=\"single-card\" onClick={this.touchClick}>\n            <h3>{desc}</h3>\n           <img className=\"card-img\" src={image} alt={desc} />\n           <hr />\n           <button \n           disabled={!unTouched} \n           onClick={this.handleClick}>\n               {unTouched ? 'Touchey?' : 'TOUCHED!'}\n               </button>\n  </div>\n      );\n    }\n  }\n\nexport default Card;","import React from \"react\"; \n\nclass Touched extends React.Component {\n    render() {\n        const touchedIds = Object.keys(this.props.touched)\n        const total = touchedIds.reduce((prevTotal, key) => {\n            const card = this.props.cards[key];\n            const count = this.props.touched[key];\n            const hasBeenTouched = card && card.status === false;\n            if(hasBeenTouched) {\n                return prevTotal + (count)\n            }\n            return prevTotal;\n        },0);\n        return (\n            <div className=\"touch-wrap\">\n                <h2>Touched</h2>\n                {/* <ul>\n                {touchedIds.map(key => <li>{key}</li>)}\n                </ul> */}\n                <div>\n                    <h3>Total</h3>\n                <p>{total}</p>\n                </div>\n                \n            </div>\n        )\n    }\n}\nexport default Touched","import React from \"react\";\n// import logo from './logo.svg';\nimport \"./App.css\";\nimport Header from \"./components/Header\";\n// import Instructions from \"./components/Instructions\";\nimport Cardtable from \"./components/Cardtable\";\nimport imagemap from \"../src/imagemap\";\nimport Card from \"./components/Card\";\nimport Touched from \"./components/Touched\"\n\nclass App extends React.Component {\n  state = {\n    cards: {},\n    touched: {},\n    status: this.props.status,\n    currentScore: 0,\n    topScore: 0,\n    winLose: \"\",\n    clicked: [],\n  };\n\n  dealCards = () => {\n    this.setState({ cards: imagemap });\n  };\n\n  hasBeenTouched = key => {\n    // 1. take a copy of state\n    const touched = { ...this.state.touched };\n    // 2. Either add to the order, or update the number in our order\n    touched[key] = touched[key] + 1 || 1\n    // 3. Call setState to update our state object\n    this.setState({ touched });\n  };\n\n  touchyTouchy = key => {\n    // 1. take a copy of state\n    const touchy = { ...this.state.status };\n    // 2. Either add to the order, or update the number in our order\n    touchy[key] = this.setState({ status: true });\n  };\n\n  // shuffleCards = (array) => {\n  //   const cardArray = Object.keys(this.state.cards)\n  //   cardArray.sort(function(a,b){return 0.5 - Math.random()});\n\n  // I can't figure out how to make this function work. But theoretically it should be possible to turn the cardArray.sort function into a function.}\n\n  render() {\n    const cardArray = Object.keys(this.state.cards);\n\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"instruction no-marge no-pad\">\n          <div className=\"header-divs\">\n            <Cardtable dealCards={this.dealCards} />\n            {/* {console.log(this)} */}\n          </div>\n          <div className=\"header-divs\">\n            <h3 className=\"no-marge title-center\">\n              Select a card, but don't touch the same card twice.\n            </h3>\n          </div>\n          <div className=\"header-divs\"><Touched cards={this.state.cards} touched={this.state.touched}/></div>\n          \n        </div>\n        <div className=\"card-table no-marge no-pad\">\n          {/* {console.log(this)} */}\n          <div className=\"cards no-marge no-pad\">\n            {cardArray\n              .sort(function(a, b) {\n                return 0.5 - Math.random();\n              })\n              .map(key => (\n                <Card \n                key={key}\n                index={key} \n                details={this.state.cards[key]} \n                hasBeenTouched={this.hasBeenTouched}\n                touchyTouchy={this.touchyTouchy} />\n              ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}